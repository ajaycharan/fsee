# Automatically generated by make_buchner_1971.py
import numpy
import scipy.sparse
import os
ashelf_datadir = os.path.split(__file__)[0]
cube_order = ['posx', 'negx', 'posy', 'negy', 'posz', 'negz']
import cgkit.cgtypes #cgkit 2.x
receptor_dir_slicer = {None: slice(0, 40, 1), 'right': slice(20, 40, 1), 'left': slice(0, 20, 1)}
edge_slicer = {None: slice(0, 102, 1), 'right': slice(51, 102, 1), 'left': slice(0, 51, 1)}
receptor_weight_matrix = scipy.io.loadmat(open(os.path.join(datadir,"receptor_weight_matrix_buchner71.mat"),mode="rb"))
receptor_dirs = [cgkit.cgtypes.vec3(0.9372410624959685, -0.13537498393051209, 0.32132974418382382), cgkit.cgtypes.vec3(0.95964646505250151, -0.12313057831928216, 0.25281915037234992), cgkit.cgtypes.vec3(0.97411426534962997, -0.11737707648849907, 0.1931942544626096), cgkit.cgtypes.vec3(0.98711709796832081, -0.098029503209523167, 0.12645177499384758), cgkit.cgtypes.vec3(0.99229730856133547, -0.10838100090947947, 0.059996750443579001), cgkit.cgtypes.vec3(0.99498190574221756, -0.099413679818074918, -0.011310504436754522), cgkit.cgtypes.vec3(0.98909665375020173, -0.12758562398762757, -0.073550785800297405), cgkit.cgtypes.vec3(0.8620520130349717, -0.12393447791639993, 0.49143318162893945), cgkit.cgtypes.vec3(0.89837123456958867, -0.088496294016528282, 0.43022962571544648), cgkit.cgtypes.vec3(0.92865853916039076, -0.066790581119591075, 0.36487304082131905), cgkit.cgtypes.vec3(0.95435292776642855, -0.050068334434952406, 0.29445483720013094), cgkit.cgtypes.vec3(0.97406682932116084, -0.058722974722651596, 0.21850726362284459), cgkit.cgtypes.vec3(0.98894528009030391, -0.032463965430554562, 0.14468353028466618), cgkit.cgtypes.vec3(0.99621550615385746, -0.044652217963914789, 0.074571071666675037), cgkit.cgtypes.vec3(0.99951446069553151, -0.031157616524868356, 0.000213993014461313), cgkit.cgtypes.vec3(0.99790085677098828, -0.02370226412780849, -0.060266763070063366), cgkit.cgtypes.vec3(0.98978976735558521, -0.070634413915011837, -0.12380224557357175), cgkit.cgtypes.vec3(0.98515411086005578, -0.0084353493058577471, -0.17146493150968509), cgkit.cgtypes.vec3(0.97339811191813819, -0.06653357479914021, -0.21924734693640188), cgkit.cgtypes.vec3(0.95602658666198292, -0.071881923886742902, -0.28433458216294832), cgkit.cgtypes.vec3(0.9372410624959685, 0.13537498393051209, 0.32132974418382382), cgkit.cgtypes.vec3(0.95964646505250151, 0.12313057831928216, 0.25281915037234992), cgkit.cgtypes.vec3(0.97411426534962997, 0.11737707648849907, 0.1931942544626096), cgkit.cgtypes.vec3(0.98711709796832081, 0.098029503209523167, 0.12645177499384758), cgkit.cgtypes.vec3(0.99229730856133547, 0.10838100090947947, 0.059996750443579001), cgkit.cgtypes.vec3(0.99498190574221756, 0.099413679818074918, -0.011310504436754522), cgkit.cgtypes.vec3(0.98909665375020173, 0.12758562398762757, -0.073550785800297405), cgkit.cgtypes.vec3(0.8620520130349717, 0.12393447791639993, 0.49143318162893945), cgkit.cgtypes.vec3(0.89837123456958867, 0.088496294016528282, 0.43022962571544648), cgkit.cgtypes.vec3(0.92865853916039076, 0.066790581119591075, 0.36487304082131905), cgkit.cgtypes.vec3(0.95435292776642855, 0.050068334434952406, 0.29445483720013094), cgkit.cgtypes.vec3(0.97406682932116084, 0.058722974722651596, 0.21850726362284459), cgkit.cgtypes.vec3(0.98894528009030391, 0.032463965430554562, 0.14468353028466618), cgkit.cgtypes.vec3(0.99621550615385746, 0.044652217963914789, 0.074571071666675037), cgkit.cgtypes.vec3(0.99951446069553151, 0.031157616524868356, 0.000213993014461313), cgkit.cgtypes.vec3(0.99790085677098828, 0.02370226412780849, -0.060266763070063366), cgkit.cgtypes.vec3(0.98978976735558521, 0.070634413915011837, -0.12380224557357175), cgkit.cgtypes.vec3(0.98515411086005578, 0.0084353493058577471, -0.17146493150968509), cgkit.cgtypes.vec3(0.97339811191813819, 0.06653357479914021, -0.21924734693640188), cgkit.cgtypes.vec3(0.95602658666198292, 0.071881923886742902, -0.28433458216294832)]
triangles = [(19, 18, 17), (17, 18, 16), (18, 6, 16), (17, 16, 15), (6, 15, 16), (6, 5, 15), (19, 6, 18), (15, 5, 14), (5, 4, 14), (14, 4, 13), (4, 3, 13), (13, 3, 12), (6, 4, 5), (3, 2, 12), (12, 2, 11), (14, 13, 12), (2, 1, 11), (1, 10, 11), (4, 2, 3), (12, 11, 10), (1, 0, 10), (10, 0, 9), (9, 0, 8), (15, 14, 12), (0, 7, 8), (17, 15, 12), (17, 12, 10), (17, 10, 9), (6, 2, 4), (17, 9, 8), (2, 0, 1), (17, 8, 7), (39, 38, 37), (37, 38, 36), (38, 26, 36), (37, 36, 35), (26, 35, 36), (26, 25, 35), (39, 26, 38), (35, 25, 34), (25, 24, 34), (34, 24, 33), (24, 23, 33), (33, 23, 32), (26, 24, 25), (23, 22, 32), (32, 22, 31), (34, 33, 32), (22, 21, 31), (21, 30, 31), (24, 22, 23), (32, 31, 30), (21, 20, 30), (30, 20, 29), (29, 20, 28), (35, 34, 32), (20, 27, 28), (37, 35, 32), (37, 32, 30), (37, 30, 29), (26, 22, 24), (37, 29, 28), (22, 20, 21), (37, 28, 27)]
hex_faces = [[cgkit.cgtypes.vec3(0.95700059763270007, -0.12529421291276444, 0.25578104967292775), cgkit.cgtypes.vec3(0.95041348510496615, -0.10285796556158222, 0.28953457725210152), cgkit.cgtypes.vec3(0.94008417647426257, -0.08407796649501853, 0.32688587406842462), cgkit.cgtypes.vec3(0.92142361207531587, -0.096887286355543806, 0.3721441369068631), cgkit.cgtypes.vec3(0.89922143670017629, -0.1159352519544801, 0.41433085050940327), cgkit.cgtypes.vec3(0.9372410624959685, -0.13537498393051209, 0.32132974418382382)], [cgkit.cgtypes.vec3(0.95041348510496615, -0.10285796556158222, 0.28953457725210152), cgkit.cgtypes.vec3(0.95700059763270007, -0.12529421291276444, 0.25578104967292775), cgkit.cgtypes.vec3(0.96927585324109744, -0.099743543176810945, 0.22150688948593469), cgkit.cgtypes.vec3(0.96268874071336363, -0.077307295825628716, 0.25526041706510844)], [cgkit.cgtypes.vec3(0.98516940922038909, -0.11778123379520203, 0.059880073035297063), cgkit.cgtypes.vec3(0.98450955729309531, -0.10792919353583388, 0.12654759330001206), cgkit.cgtypes.vec3(0.98339221446941816, -0.082623515042858933, 0.15477651991370778), cgkit.cgtypes.vec3(0.97904212492036491, -0.069521338880568398, 0.18546168279004011), cgkit.cgtypes.vec3(0.96927585324109744, -0.099743543176810945, 0.22150688948593469), cgkit.cgtypes.vec3(0.95700059763270007, -0.12529421291276444, 0.25578104967292775), cgkit.cgtypes.vec3(0.97411426534962997, -0.11737707648849907, 0.1931942544626096)], [cgkit.cgtypes.vec3(0.99075929473749413, -0.058381895534664177, 0.1152354589817296), cgkit.cgtypes.vec3(0.98339221446941816, -0.082623515042858933, 0.15477651991370778), cgkit.cgtypes.vec3(0.98450955729309531, -0.10792919353583388, 0.12654759330001206), cgkit.cgtypes.vec3(0.99187663756117117, -0.083687574027639128, 0.087006532368033865)], [cgkit.cgtypes.vec3(0.99600909180357466, -0.061396945132754191, 0.044927271708238445), cgkit.cgtypes.vec3(0.99187663756117117, -0.083687574027639128, 0.087006532368033865), cgkit.cgtypes.vec3(0.98450955729309531, -0.10792919353583388, 0.12654759330001206), cgkit.cgtypes.vec3(0.98516940922038909, -0.11778123379520203, 0.059880073035297063), cgkit.cgtypes.vec3(0.99212528935125166, -0.11179343490506066, -0.0082881799311576403), cgkit.cgtypes.vec3(0.99559789166636148, -0.079650765750807567, 0.01630007967376193)], [cgkit.cgtypes.vec3(0.99746574106957908, -0.051424520156917244, -0.023787758164118857), cgkit.cgtypes.vec3(0.99559789166636148, -0.079650765750807567, 0.01630007967376193), cgkit.cgtypes.vec3(0.99212528935125166, -0.11179343490506066, -0.0082881799311576403), cgkit.cgtypes.vec3(0.99399313875446915, -0.083567189311170326, -0.048376017769038424)], [cgkit.cgtypes.vec3(0.97284045077677428, -0.088667040891170237, -0.19237757163321584), cgkit.cgtypes.vec3(0.98409484434130834, -0.088251204233926531, -0.13886679277009034), cgkit.cgtypes.vec3(0.992262425958925, -0.073974100676815951, -0.085873264814644162), cgkit.cgtypes.vec3(0.99399313875446915, -0.083567189311170326, -0.048376017769038424), cgkit.cgtypes.vec3(0.99212528935125166, -0.11179343490506066, -0.0082881799311576403), cgkit.cgtypes.vec3(0.98516940922038909, -0.11778123379520203, 0.059880073035297063), cgkit.cgtypes.vec3(0.98909665375020173, -0.12758562398762757, -0.073550785800297405)], [cgkit.cgtypes.vec3(0.91519245282153872, -0.073622040412928649, 0.25006595861156694), cgkit.cgtypes.vec3(0.89922143670017629, -0.1159352519544801, 0.41433085050940327)], [cgkit.cgtypes.vec3(0.93739462819667829, -0.05457407481399236, 0.2078792450090268), cgkit.cgtypes.vec3(0.92142361207531587, -0.096887286355543806, 0.3721441369068631), cgkit.cgtypes.vec3(0.89922143670017629, -0.1159352519544801, 0.41433085050940327), cgkit.cgtypes.vec3(0.91519245282153872, -0.073622040412928649, 0.25006595861156694)], [cgkit.cgtypes.vec3(0.95605519259562499, -0.041764754953467077, 0.16262098217058829), cgkit.cgtypes.vec3(0.94008417647426257, -0.08407796649501853, 0.32688587406842462), cgkit.cgtypes.vec3(0.92142361207531587, -0.096887286355543806, 0.3721441369068631), cgkit.cgtypes.vec3(0.93739462819667829, -0.05457407481399236, 0.2078792450090268)], [cgkit.cgtypes.vec3(0.95605519259562499, -0.041764754953467077, 0.16262098217058829), cgkit.cgtypes.vec3(0.94008417647426257, -0.08407796649501853, 0.32688587406842462), cgkit.cgtypes.vec3(0.95041348510496615, -0.10285796556158222, 0.28953457725210152), cgkit.cgtypes.vec3(0.96268874071336363, -0.077307295825628716, 0.25526041706510844), cgkit.cgtypes.vec3(0.9724550123926311, -0.047085091529386183, 0.2192152103692139), cgkit.cgtypes.vec3(0.97615077290559604, -0.030322549723788235, 0.089224478658370687)], [cgkit.cgtypes.vec3(0.96927585324109744, -0.099743543176810945, 0.22150688948593469), cgkit.cgtypes.vec3(0.96268874071336363, -0.077307295825628716, 0.25526041706510844), cgkit.cgtypes.vec3(0.9724550123926311, -0.047085091529386183, 0.2192152103692139), cgkit.cgtypes.vec3(0.97904212492036491, -0.069521338880568398, 0.18546168279004011)], [cgkit.cgtypes.vec3(0.9724550123926311, -0.047085091529386183, 0.2192152103692139), cgkit.cgtypes.vec3(0.97615077290559604, -0.030322549723788235, 0.089224478658370687), cgkit.cgtypes.vec3(0.99066674924044928, -0.021533859621406932, -0.029016054765027423), cgkit.cgtypes.vec3(0.99545353251894131, -0.029107948694410468, 0.028210253409688042), cgkit.cgtypes.vec3(0.99489174897989763, -0.036091266639779233, 0.073156198321934179), cgkit.cgtypes.vec3(0.99075929473749413, -0.058381895534664177, 0.1152354589817296), cgkit.cgtypes.vec3(0.98339221446941816, -0.082623515042858933, 0.15477651991370778), cgkit.cgtypes.vec3(0.97904212492036491, -0.069521338880568398, 0.18546168279004011)], [cgkit.cgtypes.vec3(0.99187663756117117, -0.083687574027639128, 0.087006532368033865), cgkit.cgtypes.vec3(0.99075929473749413, -0.058381895534664177, 0.1152354589817296), cgkit.cgtypes.vec3(0.99489174897989763, -0.036091266639779233, 0.073156198321934179), cgkit.cgtypes.vec3(0.99600909180357466, -0.061396945132754191, 0.044927271708238445)], [cgkit.cgtypes.vec3(0.99559789166636148, -0.079650765750807567, 0.01630007967376193), cgkit.cgtypes.vec3(0.99600909180357466, -0.061396945132754191, 0.044927271708238445), cgkit.cgtypes.vec3(0.99489174897989763, -0.036091266639779233, 0.073156198321934179), cgkit.cgtypes.vec3(0.99545353251894131, -0.029107948694410468, 0.028210253409688042), cgkit.cgtypes.vec3(0.99746574106957908, -0.051424520156917244, -0.023787758164118857)], [cgkit.cgtypes.vec3(0.99399313875446915, -0.083567189311170326, -0.048376017769038424), cgkit.cgtypes.vec3(0.99746574106957908, -0.051424520156917244, -0.023787758164118857), cgkit.cgtypes.vec3(0.99545353251894131, -0.029107948694410468, 0.028210253409688042), cgkit.cgtypes.vec3(0.99066674924044928, -0.021533859621406932, -0.029016054765027423), cgkit.cgtypes.vec3(0.99094824499554302, -0.034257342449559358, -0.11851131338444006), cgkit.cgtypes.vec3(0.992262425958925, -0.073974100676815951, -0.085873264814644162)], [cgkit.cgtypes.vec3(0.992262425958925, -0.073974100676815951, -0.085873264814644162), cgkit.cgtypes.vec3(0.99094824499554302, -0.034257342449559358, -0.11851131338444006), cgkit.cgtypes.vec3(0.98278066337792636, -0.04853444600666993, -0.17150484133988622), cgkit.cgtypes.vec3(0.98409484434130834, -0.088251204233926531, -0.13886679277009034)], [cgkit.cgtypes.vec3(0.91519245282153872, -0.073622040412928649, 0.25006595861156694), cgkit.cgtypes.vec3(0.93739462819667829, -0.05457407481399236, 0.2078792450090268), cgkit.cgtypes.vec3(0.95605519259562499, -0.041764754953467077, 0.16262098217058829), cgkit.cgtypes.vec3(0.97615077290559604, -0.030322549723788235, 0.089224478658370687), cgkit.cgtypes.vec3(0.99066674924044928, -0.021533859621406932, -0.029016054765027423), cgkit.cgtypes.vec3(0.99094824499554302, -0.034257342449559358, -0.11851131338444006), cgkit.cgtypes.vec3(0.98278066337792636, -0.04853444600666993, -0.17150484133988622), cgkit.cgtypes.vec3(0.97152626981339218, -0.048950282663913609, -0.22501562020301175), cgkit.cgtypes.vec3(0.98515411086005578, -0.0084353493058577471, -0.17146493150968509)], [cgkit.cgtypes.vec3(0.98278066337792636, -0.04853444600666993, -0.17150484133988622), cgkit.cgtypes.vec3(0.98409484434130834, -0.088251204233926531, -0.13886679277009034), cgkit.cgtypes.vec3(0.97284045077677428, -0.088667040891170237, -0.19237757163321584), cgkit.cgtypes.vec3(0.97152626981339218, -0.048950282663913609, -0.22501562020301175)], [cgkit.cgtypes.vec3(0.97284045077677428, -0.088667040891170237, -0.19237757163321584), cgkit.cgtypes.vec3(0.97152626981339218, -0.048950282663913609, -0.22501562020301175)], [cgkit.cgtypes.vec3(0.95700059763270007, 0.12529421291276444, 0.25578104967292775), cgkit.cgtypes.vec3(0.95041348510496615, 0.10285796556158222, 0.28953457725210152), cgkit.cgtypes.vec3(0.94008417647426257, 0.08407796649501853, 0.32688587406842462), cgkit.cgtypes.vec3(0.92142361207531587, 0.096887286355543806, 0.3721441369068631), cgkit.cgtypes.vec3(0.89922143670017629, 0.1159352519544801, 0.41433085050940327), cgkit.cgtypes.vec3(0.9372410624959685, 0.13537498393051209, 0.32132974418382382)], [cgkit.cgtypes.vec3(0.95041348510496615, 0.10285796556158222, 0.28953457725210152), cgkit.cgtypes.vec3(0.95700059763270007, 0.12529421291276444, 0.25578104967292775), cgkit.cgtypes.vec3(0.96927585324109744, 0.099743543176810945, 0.22150688948593469), cgkit.cgtypes.vec3(0.96268874071336363, 0.077307295825628716, 0.25526041706510844)], [cgkit.cgtypes.vec3(0.98516940922038909, 0.11778123379520203, 0.059880073035297063), cgkit.cgtypes.vec3(0.98450955729309531, 0.10792919353583388, 0.12654759330001206), cgkit.cgtypes.vec3(0.98339221446941816, 0.082623515042858933, 0.15477651991370778), cgkit.cgtypes.vec3(0.97904212492036491, 0.069521338880568398, 0.18546168279004011), cgkit.cgtypes.vec3(0.96927585324109744, 0.099743543176810945, 0.22150688948593469), cgkit.cgtypes.vec3(0.95700059763270007, 0.12529421291276444, 0.25578104967292775), cgkit.cgtypes.vec3(0.97411426534962997, 0.11737707648849907, 0.1931942544626096)], [cgkit.cgtypes.vec3(0.99075929473749413, 0.058381895534664177, 0.1152354589817296), cgkit.cgtypes.vec3(0.98339221446941816, 0.082623515042858933, 0.15477651991370778), cgkit.cgtypes.vec3(0.98450955729309531, 0.10792919353583388, 0.12654759330001206), cgkit.cgtypes.vec3(0.99187663756117117, 0.083687574027639128, 0.087006532368033865)], [cgkit.cgtypes.vec3(0.99600909180357466, 0.061396945132754191, 0.044927271708238445), cgkit.cgtypes.vec3(0.99187663756117117, 0.083687574027639128, 0.087006532368033865), cgkit.cgtypes.vec3(0.98450955729309531, 0.10792919353583388, 0.12654759330001206), cgkit.cgtypes.vec3(0.98516940922038909, 0.11778123379520203, 0.059880073035297063), cgkit.cgtypes.vec3(0.99212528935125166, 0.11179343490506066, -0.0082881799311576403), cgkit.cgtypes.vec3(0.99559789166636148, 0.079650765750807567, 0.01630007967376193)], [cgkit.cgtypes.vec3(0.99746574106957908, 0.051424520156917244, -0.023787758164118857), cgkit.cgtypes.vec3(0.99559789166636148, 0.079650765750807567, 0.01630007967376193), cgkit.cgtypes.vec3(0.99212528935125166, 0.11179343490506066, -0.0082881799311576403), cgkit.cgtypes.vec3(0.99399313875446915, 0.083567189311170326, -0.048376017769038424)], [cgkit.cgtypes.vec3(0.97284045077677428, 0.088667040891170237, -0.19237757163321584), cgkit.cgtypes.vec3(0.98409484434130834, 0.088251204233926531, -0.13886679277009034), cgkit.cgtypes.vec3(0.992262425958925, 0.073974100676815951, -0.085873264814644162), cgkit.cgtypes.vec3(0.99399313875446915, 0.083567189311170326, -0.048376017769038424), cgkit.cgtypes.vec3(0.99212528935125166, 0.11179343490506066, -0.0082881799311576403), cgkit.cgtypes.vec3(0.98516940922038909, 0.11778123379520203, 0.059880073035297063), cgkit.cgtypes.vec3(0.98909665375020173, 0.12758562398762757, -0.073550785800297405)], [cgkit.cgtypes.vec3(0.91519245282153872, 0.073622040412928649, 0.25006595861156694), cgkit.cgtypes.vec3(0.89922143670017629, 0.1159352519544801, 0.41433085050940327)], [cgkit.cgtypes.vec3(0.93739462819667829, 0.05457407481399236, 0.2078792450090268), cgkit.cgtypes.vec3(0.92142361207531587, 0.096887286355543806, 0.3721441369068631), cgkit.cgtypes.vec3(0.89922143670017629, 0.1159352519544801, 0.41433085050940327), cgkit.cgtypes.vec3(0.91519245282153872, 0.073622040412928649, 0.25006595861156694)], [cgkit.cgtypes.vec3(0.95605519259562499, 0.041764754953467077, 0.16262098217058829), cgkit.cgtypes.vec3(0.94008417647426257, 0.08407796649501853, 0.32688587406842462), cgkit.cgtypes.vec3(0.92142361207531587, 0.096887286355543806, 0.3721441369068631), cgkit.cgtypes.vec3(0.93739462819667829, 0.05457407481399236, 0.2078792450090268)], [cgkit.cgtypes.vec3(0.95605519259562499, 0.041764754953467077, 0.16262098217058829), cgkit.cgtypes.vec3(0.94008417647426257, 0.08407796649501853, 0.32688587406842462), cgkit.cgtypes.vec3(0.95041348510496615, 0.10285796556158222, 0.28953457725210152), cgkit.cgtypes.vec3(0.96268874071336363, 0.077307295825628716, 0.25526041706510844), cgkit.cgtypes.vec3(0.9724550123926311, 0.047085091529386183, 0.2192152103692139), cgkit.cgtypes.vec3(0.97615077290559604, 0.030322549723788235, 0.089224478658370687)], [cgkit.cgtypes.vec3(0.96927585324109744, 0.099743543176810945, 0.22150688948593469), cgkit.cgtypes.vec3(0.96268874071336363, 0.077307295825628716, 0.25526041706510844), cgkit.cgtypes.vec3(0.9724550123926311, 0.047085091529386183, 0.2192152103692139), cgkit.cgtypes.vec3(0.97904212492036491, 0.069521338880568398, 0.18546168279004011)], [cgkit.cgtypes.vec3(0.9724550123926311, 0.047085091529386183, 0.2192152103692139), cgkit.cgtypes.vec3(0.97615077290559604, 0.030322549723788235, 0.089224478658370687), cgkit.cgtypes.vec3(0.99066674924044928, 0.021533859621406932, -0.029016054765027423), cgkit.cgtypes.vec3(0.99545353251894131, 0.029107948694410468, 0.028210253409688042), cgkit.cgtypes.vec3(0.99489174897989763, 0.036091266639779233, 0.073156198321934179), cgkit.cgtypes.vec3(0.99075929473749413, 0.058381895534664177, 0.1152354589817296), cgkit.cgtypes.vec3(0.98339221446941816, 0.082623515042858933, 0.15477651991370778), cgkit.cgtypes.vec3(0.97904212492036491, 0.069521338880568398, 0.18546168279004011)], [cgkit.cgtypes.vec3(0.99187663756117117, 0.083687574027639128, 0.087006532368033865), cgkit.cgtypes.vec3(0.99075929473749413, 0.058381895534664177, 0.1152354589817296), cgkit.cgtypes.vec3(0.99489174897989763, 0.036091266639779233, 0.073156198321934179), cgkit.cgtypes.vec3(0.99600909180357466, 0.061396945132754191, 0.044927271708238445)], [cgkit.cgtypes.vec3(0.99559789166636148, 0.079650765750807567, 0.01630007967376193), cgkit.cgtypes.vec3(0.99600909180357466, 0.061396945132754191, 0.044927271708238445), cgkit.cgtypes.vec3(0.99489174897989763, 0.036091266639779233, 0.073156198321934179), cgkit.cgtypes.vec3(0.99545353251894131, 0.029107948694410468, 0.028210253409688042), cgkit.cgtypes.vec3(0.99746574106957908, 0.051424520156917244, -0.023787758164118857)], [cgkit.cgtypes.vec3(0.99399313875446915, 0.083567189311170326, -0.048376017769038424), cgkit.cgtypes.vec3(0.99746574106957908, 0.051424520156917244, -0.023787758164118857), cgkit.cgtypes.vec3(0.99545353251894131, 0.029107948694410468, 0.028210253409688042), cgkit.cgtypes.vec3(0.99066674924044928, 0.021533859621406932, -0.029016054765027423), cgkit.cgtypes.vec3(0.99094824499554302, 0.034257342449559358, -0.11851131338444006), cgkit.cgtypes.vec3(0.992262425958925, 0.073974100676815951, -0.085873264814644162)], [cgkit.cgtypes.vec3(0.992262425958925, 0.073974100676815951, -0.085873264814644162), cgkit.cgtypes.vec3(0.99094824499554302, 0.034257342449559358, -0.11851131338444006), cgkit.cgtypes.vec3(0.98278066337792636, 0.04853444600666993, -0.17150484133988622), cgkit.cgtypes.vec3(0.98409484434130834, 0.088251204233926531, -0.13886679277009034)], [cgkit.cgtypes.vec3(0.91519245282153872, 0.073622040412928649, 0.25006595861156694), cgkit.cgtypes.vec3(0.93739462819667829, 0.05457407481399236, 0.2078792450090268), cgkit.cgtypes.vec3(0.95605519259562499, 0.041764754953467077, 0.16262098217058829), cgkit.cgtypes.vec3(0.97615077290559604, 0.030322549723788235, 0.089224478658370687), cgkit.cgtypes.vec3(0.99066674924044928, 0.021533859621406932, -0.029016054765027423), cgkit.cgtypes.vec3(0.99094824499554302, 0.034257342449559358, -0.11851131338444006), cgkit.cgtypes.vec3(0.98278066337792636, 0.04853444600666993, -0.17150484133988622), cgkit.cgtypes.vec3(0.97152626981339218, 0.048950282663913609, -0.22501562020301175), cgkit.cgtypes.vec3(0.98515411086005578, 0.0084353493058577471, -0.17146493150968509)], [cgkit.cgtypes.vec3(0.98278066337792636, 0.04853444600666993, -0.17150484133988622), cgkit.cgtypes.vec3(0.98409484434130834, 0.088251204233926531, -0.13886679277009034), cgkit.cgtypes.vec3(0.97284045077677428, 0.088667040891170237, -0.19237757163321584), cgkit.cgtypes.vec3(0.97152626981339218, 0.048950282663913609, -0.22501562020301175)], [cgkit.cgtypes.vec3(0.97284045077677428, 0.088667040891170237, -0.19237757163321584), cgkit.cgtypes.vec3(0.97152626981339218, 0.048950282663913609, -0.22501562020301175)]]
edges = [(18, 19), (17, 18), (17, 19), (16, 18), (16, 17), (6, 18), (6, 16), (15, 16), (15, 17), (6, 15), (5, 6), (5, 15), (6, 19), (5, 14), (14, 15), (4, 5), (4, 14), (4, 13), (13, 14), (3, 4), (3, 13), (3, 12), (12, 13), (4, 6), (2, 3), (2, 12), (2, 11), (11, 12), (12, 14), (1, 2), (1, 11), (1, 10), (10, 11), (2, 4), (10, 12), (0, 1), (0, 10), (0, 9), (9, 10), (0, 8), (8, 9), (12, 15), (0, 7), (7, 8), (12, 17), (10, 17), (9, 17), (2, 6), (8, 17), (0, 2), (7, 17), [38, 39], [37, 38], [37, 39], [36, 38], [36, 37], [26, 38], [26, 36], [35, 36], [35, 37], [26, 35], [25, 26], [25, 35], [26, 39], [25, 34], [34, 35], [24, 25], [24, 34], [24, 33], [33, 34], [23, 24], [23, 33], [23, 32], [32, 33], [24, 26], [22, 23], [22, 32], [22, 31], [31, 32], [32, 34], [21, 22], [21, 31], [21, 30], [30, 31], [22, 24], [30, 32], [20, 21], [20, 30], [20, 29], [29, 30], [20, 28], [28, 29], [32, 35], [20, 27], [27, 28], [32, 37], [30, 37], [29, 37], [22, 26], [28, 37], [20, 22], [27, 37]]



# The contents of this file get pasted into others
# Copyright (C) 2005-2007 California Institute of Technology, All rights reserved
# Author: Andrew D. Straw
from util import get_mean_interommatidial_distance

if __name__ == '__main__':
    
    if 0:
        v2 = [ (v.x, v.y, v.z) for v in receptor_dirs ]
        if 0:
            print repr(v2)
        elif 0:
            import pylab
            xs, ys, zs = zip(*v2)
            pylab.plot( xs, zs )
            pylab.show()
        elif 0:
            # This was piped to qhull "qhull i < receptors.qhull"
            print '3'
            print len(receptor_dirs)
            for v in receptor_dirs:
                print ' '.join(map(repr,v))

    if 1:
        import vtk
        from vtk.util.colors import red, purple, banana
        
        def init_vtk():

            renWin = vtk.vtkRenderWindow()

            renderers = []

            if 1:
                camera = vtk.vtkCamera()
                camera.SetParallelProjection(1)

                camera.SetClippingRange (1e-3, 1e6)

                ren1 = vtk.vtkRenderer()
                lk = vtk.vtkLightKit()
                ren1.SetViewport(0.0,0,1.0,1.0)
                ren1.SetBackground( .6,.6,.75)
                ren1.SetActiveCamera( camera )
                renWin.AddRenderer( ren1 )
                renderers.append( ren1 )
                
            renWin.SetSize( 1024, 768 )
            return renWin, renderers
    
        def interact_with_renWin(renWin, ren1=None, actor=None):

            iren = vtk.vtkRenderWindowInteractor()
            iren.SetRenderWindow( renWin )

            iren.SetInteractorStyle(vtk.vtkInteractorStyleTrackballCamera())
            iren.Initialize ()

            renWin.Render()

            iren.Start()
            
        renWin, renderers = init_vtk()

        camera = renderers[0].GetActiveCamera()

        camera.SetParallelProjection(1)
        camera.SetFocalPoint (0.0, 0.0, 0.0)
        camera.SetPosition (-7.0408423455838438, 4.8870908878427501, -1.2421278994521863)
        camera.SetViewAngle(30.0)
        camera.SetViewUp (0.57291464566682204, 0.73136940687668806, -0.36995621290269104)
        camera.SetClippingRange (3.6770148314673339, 14.954014556113785)
        camera.SetParallelScale(3.89701935633)

        renderers[0].SetActiveCamera(camera)

        def vtk_label_iod( receptor_dirs, triangles, renderers ):
            dists = get_mean_interommatidial_distance( receptor_dirs, triangles )
            pi = 3.1415926535897931
            R2D = 180.0/pi
            for v,dist in zip(receptor_dirs,dists):
                atext = vtk.vtkVectorText()
                atext.SetText("%.1f"%(dist*R2D,))
                textMapper = vtk.vtkPolyDataMapper()
                textMapper.SetInput(atext.GetOutput())
                textActor = vtk.vtkFollower()
                textActor.SetMapper(textMapper)
                scale = 0.03
                textActor.SetScale(scale, scale, scale)
                mult = 1.02
                textActor.AddPosition(v.x*mult,v.y*mult,v.z*mult)
                for renderer in renderers:
                    renderer.AddActor( textActor )
            
            
        def vtk_draw(receptor_dirs, triangles, hex_faces, renderers):
            tri_points = vtk.vtkPoints()
            tri_cells = vtk.vtkCellArray()

            body_line_points = vtk.vtkPoints()
            body_lines = vtk.vtkCellArray()
            body_point_num = 0
            
            for v in receptor_dirs:
                #if v.z > 0:
                if 1:
                    tri_points.InsertNextPoint(v.x, v.y, v.z)

            for tri in triangles:
                tri_cells.InsertNextCell(3)
                tri_cells.InsertCellPoint(tri[0])
                tri_cells.InsertCellPoint(tri[1])
                tri_cells.InsertCellPoint(tri[2])

            for face in hex_faces:
                body_lines.InsertNextCell( len(face)+1 )
                for v in face:
                    body_line_points.InsertNextPoint(v.x, v.y, v.z)
                    body_lines.InsertCellPoint( body_point_num )
                    body_point_num += 1
                v = face[0] # connect to beginning
                body_line_points.InsertNextPoint(v.x, v.y, v.z)
                body_lines.InsertCellPoint( body_point_num )
                body_point_num += 1

            if 1:
                profileData = vtk.vtkPolyData()
                profileData.SetPoints(tri_points)
                profileData.SetPolys(tri_cells)

                profileMapper = vtk.vtkPolyDataMapper()
                profileMapper.SetInput(profileData)

                profile = vtk.vtkActor()
                profile.SetMapper(profileMapper)
                profile.GetProperty().SetDiffuseColor(purple)
                profile.GetProperty().SetSpecular(.3)
                profile.GetProperty().SetSpecularPower(30)

                for renderer in renderers:
                    renderer.AddActor( profile )
            else:
                points_poly_data = vtk.vtkPolyData()
                points_poly_data.SetPoints(tri_points)

                head = vtk.vtkSphereSource()
                head.SetRadius(.05)
                #head.SetThetaResolution(8)
                #head.SetPhiResolution(8)
                head.SetThetaResolution(15)
                head.SetPhiResolution(15)

                head_glyphs = vtk.vtkGlyph3D()
                head_glyphs.SetInput(points_poly_data)
                head_glyphs.SetSource(head.GetOutput())

                head_glyph_mapper = vtk.vtkPolyDataMapper()
                head_glyph_mapper.SetInput( head_glyphs.GetOutput())
                headGlyphActor = vtk.vtkActor()
                headGlyphActor.SetMapper(head_glyph_mapper)
                headGlyphActor.GetProperty().SetDiffuseColor(purple)
                headGlyphActor.GetProperty().SetSpecular(.3)
                headGlyphActor.GetProperty().SetSpecularPower(30)

                for renderer in renderers:
                    renderer.AddActor( headGlyphActor )

            if 1:
                profileData = vtk.vtkPolyData()

                profileData.SetPoints(body_line_points)
                profileData.SetLines(body_lines)

                # Add thickness to the resulting line.
                profileTubes = vtk.vtkTubeFilter()
                profileTubes.SetNumberOfSides(8)
                profileTubes.SetInput(profileData)
                profileTubes.SetRadius(.005)
                #profileTubes.SetRadius(.8)

                profileMapper = vtk.vtkPolyDataMapper()
                profileMapper.SetInput(profileTubes.GetOutput())

                profile = vtk.vtkActor()
                profile.SetMapper(profileMapper)
                #profile.GetProperty().SetDiffuseColor( 0xd6/255.0, 0xec/255.0, 0x1c/255.0)
                #profile.GetProperty().SetDiffuseColor(cerulean)
                profile.GetProperty().SetDiffuseColor(banana)
                profile.GetProperty().SetSpecular(.3)
                profile.GetProperty().SetSpecularPower(30)

                for renderer in renderers:
                    renderer.AddActor( profile )

        vtk_draw( receptor_dirs, triangles, hex_faces, renderers )
        vtk_label_iod( receptor_dirs, triangles, renderers )
        interact_with_renWin(renWin,renderers)
