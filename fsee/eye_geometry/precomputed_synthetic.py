# Automatically generated by __main__
import numpy
import scipy
import scipy.sparse
import scipy.io
import cgkit.cgtypes # cgkit 2
import os
datadir = os.path.split(__file__)[0]
cube_order = ['posx', 'negx', 'posy', 'negy', 'posz', 'negz']
receptor_dir_slicer = {None: slice(0, 42, 1)}
edge_slicer = {None: slice(0, 120, 1)}
receptor_weight_matrix_64 = scipy.io.loadmat(open(os.path.join(datadir,"receptor_weight_matrix_64_synthetic.mat"),mode="rb"))["receptor_weight_matrix_64"]
receptor_dirs = [cgkit.cgtypes.vec3(0.0, -0.52573111211913359, -0.85065080835203999), cgkit.cgtypes.vec3(0.0, -0.52573111211913359, 0.85065080835203999), cgkit.cgtypes.vec3(0.0, 0.52573111211913359, -0.85065080835203999), cgkit.cgtypes.vec3(0.0, 0.52573111211913359, 0.85065080835203999), cgkit.cgtypes.vec3(-0.52573111211913359, -0.85065080835203999, 0.0), cgkit.cgtypes.vec3(-0.52573111211913359, 0.85065080835203999, 0.0), cgkit.cgtypes.vec3(0.52573111211913359, -0.85065080835203999, 0.0), cgkit.cgtypes.vec3(0.52573111211913359, 0.85065080835203999, 0.0), cgkit.cgtypes.vec3(-0.85065080835203999, 0.0, -0.52573111211913359), cgkit.cgtypes.vec3(0.85065080835203999, 0.0, -0.52573111211913359), cgkit.cgtypes.vec3(-0.85065080835203999, 0.0, 0.52573111211913359), cgkit.cgtypes.vec3(0.85065080835203999, 0.0, 0.52573111211913359), cgkit.cgtypes.vec3(-0.80901699437494734, 0.49999999999999994, 0.3090169943749474), cgkit.cgtypes.vec3(-0.99999999999999989, 0.0, 0.0), cgkit.cgtypes.vec3(-0.80901699437494734, 0.49999999999999994, -0.3090169943749474), cgkit.cgtypes.vec3(-0.49999999999999994, 0.3090169943749474, 0.80901699437494734), cgkit.cgtypes.vec3(0.0, 0.0, 0.99999999999999989), cgkit.cgtypes.vec3(-0.49999999999999994, -0.3090169943749474, 0.80901699437494734), cgkit.cgtypes.vec3(-0.3090169943749474, 0.80901699437494734, 0.49999999999999994), cgkit.cgtypes.vec3(0.3090169943749474, -0.80901699437494734, -0.49999999999999994), cgkit.cgtypes.vec3(0.80901699437494734, -0.49999999999999994, -0.3090169943749474), cgkit.cgtypes.vec3(0.49999999999999994, -0.3090169943749474, -0.80901699437494734), cgkit.cgtypes.vec3(-0.3090169943749474, 0.80901699437494734, -0.49999999999999994), cgkit.cgtypes.vec3(-0.49999999999999994, 0.3090169943749474, -0.80901699437494734), cgkit.cgtypes.vec3(0.0, 0.0, -0.99999999999999989), cgkit.cgtypes.vec3(-0.49999999999999994, -0.3090169943749474, -0.80901699437494734), cgkit.cgtypes.vec3(0.49999999999999994, 0.3090169943749474, -0.80901699437494734), cgkit.cgtypes.vec3(-0.3090169943749474, -0.80901699437494734, -0.49999999999999994), cgkit.cgtypes.vec3(-0.80901699437494734, -0.49999999999999994, -0.3090169943749474), cgkit.cgtypes.vec3(-0.80901699437494734, -0.49999999999999994, 0.3090169943749474), cgkit.cgtypes.vec3(-0.3090169943749474, -0.80901699437494734, 0.49999999999999994), cgkit.cgtypes.vec3(0.0, -0.99999999999999989, 0.0), cgkit.cgtypes.vec3(0.3090169943749474, -0.80901699437494734, 0.49999999999999994), cgkit.cgtypes.vec3(0.80901699437494734, -0.49999999999999994, 0.3090169943749474), cgkit.cgtypes.vec3(0.49999999999999994, -0.3090169943749474, 0.80901699437494734), cgkit.cgtypes.vec3(0.49999999999999994, 0.3090169943749474, 0.80901699437494734), cgkit.cgtypes.vec3(0.99999999999999989, 0.0, 0.0), cgkit.cgtypes.vec3(0.3090169943749474, 0.80901699437494734, -0.49999999999999994), cgkit.cgtypes.vec3(0.0, 0.99999999999999989, 0.0), cgkit.cgtypes.vec3(0.3090169943749474, 0.80901699437494734, 0.49999999999999994), cgkit.cgtypes.vec3(0.80901699437494734, 0.49999999999999994, -0.3090169943749474), cgkit.cgtypes.vec3(0.80901699437494734, 0.49999999999999994, 0.3090169943749474)]
triangles = [(5, 12, 14), (12, 10, 13), (14, 13, 8), (14, 12, 13), (10, 15, 17), (15, 3, 16), (17, 16, 1), (17, 15, 16), (3, 15, 18), (15, 10, 12), (18, 12, 5), (18, 15, 12), (0, 19, 21), (19, 6, 20), (21, 20, 9), (21, 19, 20), (2, 22, 23), (22, 5, 14), (23, 14, 8), (23, 22, 14), (0, 24, 25), (24, 2, 23), (25, 23, 8), (25, 24, 23), (2, 24, 26), (24, 0, 21), (26, 21, 9), (26, 24, 21), (4, 27, 28), (27, 0, 25), (28, 25, 8), (28, 27, 25), (4, 29, 30), (29, 10, 17), (30, 17, 1), (30, 29, 17), (10, 29, 13), (29, 4, 28), (13, 28, 8), (13, 29, 28), (6, 31, 32), (31, 4, 30), (32, 30, 1), (32, 31, 30), (4, 31, 27), (31, 6, 19), (27, 19, 0), (27, 31, 19), (11, 33, 34), (33, 6, 32), (34, 32, 1), (34, 33, 32), (3, 35, 16), (35, 11, 34), (16, 34, 1), (16, 35, 34), (6, 33, 20), (33, 11, 36), (20, 36, 9), (20, 33, 36), (2, 37, 22), (37, 7, 38), (22, 38, 5), (22, 37, 38), (7, 39, 38), (39, 3, 18), (38, 18, 5), (38, 39, 18), (7, 37, 40), (37, 2, 26), (40, 26, 9), (40, 37, 26), (11, 41, 36), (41, 7, 40), (36, 40, 9), (36, 41, 40), (7, 41, 39), (41, 11, 35), (39, 35, 3), (39, 41, 35)]
edges = [(5, 12), (12, 14), (5, 14), (10, 12), (10, 13), (12, 13), (13, 14), (8, 13), (8, 14), (10, 15), (15, 17), (10, 17), (3, 15), (3, 16), (15, 16), (16, 17), (1, 16), (1, 17), (15, 18), (3, 18), (12, 15), (12, 18), (5, 18), (0, 19), (19, 21), (0, 21), (6, 19), (6, 20), (19, 20), (20, 21), (9, 20), (9, 21), (2, 22), (22, 23), (2, 23), (5, 22), (14, 22), (14, 23), (8, 23), (0, 24), (24, 25), (0, 25), (2, 24), (23, 24), (23, 25), (8, 25), (24, 26), (2, 26), (21, 24), (21, 26), (9, 26), (4, 27), (27, 28), (4, 28), (0, 27), (25, 27), (25, 28), (8, 28), (4, 29), (29, 30), (4, 30), (10, 29), (17, 29), (17, 30), (1, 30), (13, 29), (28, 29), (13, 28), (6, 31), (31, 32), (6, 32), (4, 31), (30, 31), (30, 32), (1, 32), (27, 31), (19, 31), (19, 27), (11, 33), (33, 34), (11, 34), (6, 33), (32, 33), (32, 34), (1, 34), (3, 35), (16, 35), (11, 35), (34, 35), (16, 34), (20, 33), (11, 36), (33, 36), (20, 36), (9, 36), (2, 37), (22, 37), (7, 37), (7, 38), (37, 38), (22, 38), (5, 38), (7, 39), (38, 39), (3, 39), (18, 39), (18, 38), (37, 40), (7, 40), (26, 37), (26, 40), (9, 40), (11, 41), (36, 41), (7, 41), (40, 41), (36, 40), (39, 41), (35, 41), (35, 39)]
hex_faces = [[cgkit.cgtypes.vec3(0.26967233145831576, -0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(0.0, -0.71458836695634276, -0.61688360278401322), cgkit.cgtypes.vec3(-0.26967233145831576, -0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(-0.16666666666666663, -0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(0.16666666666666663, -0.27824936883136031, -0.88655593424232904)], [cgkit.cgtypes.vec3(-0.16666666666666663, -0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(-0.26967233145831576, -0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.0, -0.71458836695634276, 0.61688360278401322), cgkit.cgtypes.vec3(0.26967233145831576, -0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.16666666666666663, -0.27824936883136031, 0.88655593424232904)], [cgkit.cgtypes.vec3(-0.26967233145831576, 0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(0.0, 0.71458836695634276, -0.61688360278401322), cgkit.cgtypes.vec3(0.26967233145831576, 0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(0.16666666666666663, 0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(-0.16666666666666663, 0.27824936883136031, -0.88655593424232904)], [cgkit.cgtypes.vec3(-0.16666666666666663, 0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(-0.26967233145831576, 0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.0, 0.71458836695634276, 0.61688360278401322), cgkit.cgtypes.vec3(0.26967233145831576, 0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.16666666666666663, 0.27824936883136031, 0.88655593424232904)], [cgkit.cgtypes.vec3(-0.54792170028967613, -0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(-0.27824936883136031, -0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(-0.27824936883136031, -0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(-0.54792170028967613, -0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(-0.71458836695634276, -0.61688360278401322, 0.0)], [cgkit.cgtypes.vec3(-0.71458836695634276, 0.61688360278401322, 0.0), cgkit.cgtypes.vec3(-0.54792170028967613, 0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(-0.27824936883136031, 0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(-0.27824936883136031, 0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(-0.54792170028967613, 0.71988926757566241, -0.26967233145831576)], [cgkit.cgtypes.vec3(0.54792170028967613, -0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(0.27824936883136031, -0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(0.27824936883136031, -0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(0.54792170028967613, -0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(0.71458836695634276, -0.61688360278401322, 0.0)], [cgkit.cgtypes.vec3(0.27824936883136031, 0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(0.54792170028967613, 0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(0.71458836695634276, 0.61688360278401322, 0.0), cgkit.cgtypes.vec3(0.54792170028967613, 0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(0.27824936883136031, 0.88655593424232904, 0.16666666666666663)], [cgkit.cgtypes.vec3(-0.88655593424232904, 0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(-0.71988926757566241, 0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(-0.61688360278401322, 0.0, -0.71458836695634276), cgkit.cgtypes.vec3(-0.71988926757566241, -0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(-0.88655593424232904, -0.16666666666666663, -0.27824936883136031)], [cgkit.cgtypes.vec3(0.71988926757566241, -0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(0.61688360278401322, 0.0, -0.71458836695634276), cgkit.cgtypes.vec3(0.71988926757566241, 0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(0.88655593424232904, 0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(0.88655593424232904, -0.16666666666666663, -0.27824936883136031)], [cgkit.cgtypes.vec3(-0.88655593424232904, 0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(-0.71988926757566241, 0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(-0.61688360278401322, 0.0, 0.71458836695634276), cgkit.cgtypes.vec3(-0.71988926757566241, -0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(-0.88655593424232904, -0.16666666666666663, 0.27824936883136031)], [cgkit.cgtypes.vec3(0.71988926757566241, -0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(0.88655593424232904, -0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(0.88655593424232904, 0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(0.71988926757566241, 0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(0.61688360278401322, 0.0, 0.71458836695634276)], [cgkit.cgtypes.vec3(-0.71458836695634276, 0.61688360278401322, 0.0), cgkit.cgtypes.vec3(-0.54792170028967613, 0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(-0.53934466291663152, 0.53934466291663152, 0.53934466291663152), cgkit.cgtypes.vec3(-0.71988926757566241, 0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(-0.88655593424232904, 0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(-0.87267799624996478, 0.33333333333333326, 0.0)], [cgkit.cgtypes.vec3(-0.88655593424232904, 0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(-0.87267799624996478, 0.33333333333333326, 0.0), cgkit.cgtypes.vec3(-0.88655593424232904, 0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(-0.88655593424232904, -0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(-0.87267799624996478, -0.33333333333333326, 0.0), cgkit.cgtypes.vec3(-0.88655593424232904, -0.16666666666666663, 0.27824936883136031)], [cgkit.cgtypes.vec3(-0.71458836695634276, 0.61688360278401322, 0.0), cgkit.cgtypes.vec3(-0.54792170028967613, 0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(-0.53934466291663152, 0.53934466291663152, -0.53934466291663152), cgkit.cgtypes.vec3(-0.71988926757566241, 0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(-0.88655593424232904, 0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(-0.87267799624996478, 0.33333333333333326, 0.0)], [cgkit.cgtypes.vec3(-0.61688360278401322, 0.0, 0.71458836695634276), cgkit.cgtypes.vec3(-0.71988926757566241, 0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(-0.53934466291663152, 0.53934466291663152, 0.53934466291663152), cgkit.cgtypes.vec3(-0.26967233145831576, 0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(-0.16666666666666663, 0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(-0.33333333333333326, 0.0, 0.87267799624996478)], [cgkit.cgtypes.vec3(-0.16666666666666663, 0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(-0.33333333333333326, 0.0, 0.87267799624996478), cgkit.cgtypes.vec3(-0.16666666666666663, -0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(0.16666666666666663, -0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(0.33333333333333326, 0.0, 0.87267799624996478), cgkit.cgtypes.vec3(0.16666666666666663, 0.27824936883136031, 0.88655593424232904)], [cgkit.cgtypes.vec3(-0.61688360278401322, 0.0, 0.71458836695634276), cgkit.cgtypes.vec3(-0.71988926757566241, -0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(-0.53934466291663152, -0.53934466291663152, 0.53934466291663152), cgkit.cgtypes.vec3(-0.26967233145831576, -0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(-0.16666666666666663, -0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(-0.33333333333333326, 0.0, 0.87267799624996478)], [cgkit.cgtypes.vec3(-0.26967233145831576, 0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.0, 0.71458836695634276, 0.61688360278401322), cgkit.cgtypes.vec3(0.0, 0.87267799624996478, 0.33333333333333326), cgkit.cgtypes.vec3(-0.27824936883136031, 0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(-0.54792170028967613, 0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(-0.53934466291663152, 0.53934466291663152, 0.53934466291663152)], [cgkit.cgtypes.vec3(0.26967233145831576, -0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(0.0, -0.71458836695634276, -0.61688360278401322), cgkit.cgtypes.vec3(0.0, -0.87267799624996478, -0.33333333333333326), cgkit.cgtypes.vec3(0.27824936883136031, -0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(0.54792170028967613, -0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(0.53934466291663152, -0.53934466291663152, -0.53934466291663152)], [cgkit.cgtypes.vec3(0.54792170028967613, -0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(0.53934466291663152, -0.53934466291663152, -0.53934466291663152), cgkit.cgtypes.vec3(0.71988926757566241, -0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(0.88655593424232904, -0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(0.87267799624996478, -0.33333333333333326, 0.0), cgkit.cgtypes.vec3(0.71458836695634276, -0.61688360278401322, 0.0)], [cgkit.cgtypes.vec3(0.26967233145831576, -0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(0.16666666666666663, -0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(0.33333333333333326, 0.0, -0.87267799624996478), cgkit.cgtypes.vec3(0.61688360278401322, 0.0, -0.71458836695634276), cgkit.cgtypes.vec3(0.71988926757566241, -0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(0.53934466291663152, -0.53934466291663152, -0.53934466291663152)], [cgkit.cgtypes.vec3(-0.26967233145831576, 0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(0.0, 0.71458836695634276, -0.61688360278401322), cgkit.cgtypes.vec3(0.0, 0.87267799624996478, -0.33333333333333326), cgkit.cgtypes.vec3(-0.27824936883136031, 0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(-0.54792170028967613, 0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(-0.53934466291663152, 0.53934466291663152, -0.53934466291663152)], [cgkit.cgtypes.vec3(-0.26967233145831576, 0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(-0.16666666666666663, 0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(-0.33333333333333326, 0.0, -0.87267799624996478), cgkit.cgtypes.vec3(-0.61688360278401322, 0.0, -0.71458836695634276), cgkit.cgtypes.vec3(-0.71988926757566241, 0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(-0.53934466291663152, 0.53934466291663152, -0.53934466291663152)], [cgkit.cgtypes.vec3(-0.16666666666666663, -0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(0.16666666666666663, -0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(0.33333333333333326, 0.0, -0.87267799624996478), cgkit.cgtypes.vec3(0.16666666666666663, 0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(-0.16666666666666663, 0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(-0.33333333333333326, 0.0, -0.87267799624996478)], [cgkit.cgtypes.vec3(-0.16666666666666663, -0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(-0.26967233145831576, -0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(-0.53934466291663152, -0.53934466291663152, -0.53934466291663152), cgkit.cgtypes.vec3(-0.71988926757566241, -0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(-0.61688360278401322, 0.0, -0.71458836695634276), cgkit.cgtypes.vec3(-0.33333333333333326, 0.0, -0.87267799624996478)], [cgkit.cgtypes.vec3(0.16666666666666663, 0.27824936883136031, -0.88655593424232904), cgkit.cgtypes.vec3(0.26967233145831576, 0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(0.53934466291663152, 0.53934466291663152, -0.53934466291663152), cgkit.cgtypes.vec3(0.71988926757566241, 0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(0.61688360278401322, 0.0, -0.71458836695634276), cgkit.cgtypes.vec3(0.33333333333333326, 0.0, -0.87267799624996478)], [cgkit.cgtypes.vec3(-0.54792170028967613, -0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(-0.27824936883136031, -0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(0.0, -0.87267799624996478, -0.33333333333333326), cgkit.cgtypes.vec3(0.0, -0.71458836695634276, -0.61688360278401322), cgkit.cgtypes.vec3(-0.26967233145831576, -0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(-0.53934466291663152, -0.53934466291663152, -0.53934466291663152)], [cgkit.cgtypes.vec3(-0.54792170028967613, -0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(-0.71458836695634276, -0.61688360278401322, 0.0), cgkit.cgtypes.vec3(-0.87267799624996478, -0.33333333333333326, 0.0), cgkit.cgtypes.vec3(-0.88655593424232904, -0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(-0.71988926757566241, -0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(-0.53934466291663152, -0.53934466291663152, -0.53934466291663152)], [cgkit.cgtypes.vec3(-0.54792170028967613, -0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(-0.71458836695634276, -0.61688360278401322, 0.0), cgkit.cgtypes.vec3(-0.87267799624996478, -0.33333333333333326, 0.0), cgkit.cgtypes.vec3(-0.88655593424232904, -0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(-0.71988926757566241, -0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(-0.53934466291663152, -0.53934466291663152, 0.53934466291663152)], [cgkit.cgtypes.vec3(-0.54792170028967613, -0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(-0.27824936883136031, -0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(0.0, -0.87267799624996478, 0.33333333333333326), cgkit.cgtypes.vec3(0.0, -0.71458836695634276, 0.61688360278401322), cgkit.cgtypes.vec3(-0.26967233145831576, -0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(-0.53934466291663152, -0.53934466291663152, 0.53934466291663152)], [cgkit.cgtypes.vec3(0.27824936883136031, -0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(0.27824936883136031, -0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(0.0, -0.87267799624996478, -0.33333333333333326), cgkit.cgtypes.vec3(-0.27824936883136031, -0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(-0.27824936883136031, -0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(0.0, -0.87267799624996478, 0.33333333333333326)], [cgkit.cgtypes.vec3(0.27824936883136031, -0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(0.54792170028967613, -0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(0.53934466291663152, -0.53934466291663152, 0.53934466291663152), cgkit.cgtypes.vec3(0.26967233145831576, -0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.0, -0.71458836695634276, 0.61688360278401322), cgkit.cgtypes.vec3(0.0, -0.87267799624996478, 0.33333333333333326)], [cgkit.cgtypes.vec3(0.71988926757566241, -0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(0.88655593424232904, -0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(0.87267799624996478, -0.33333333333333326, 0.0), cgkit.cgtypes.vec3(0.71458836695634276, -0.61688360278401322, 0.0), cgkit.cgtypes.vec3(0.54792170028967613, -0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(0.53934466291663152, -0.53934466291663152, 0.53934466291663152)], [cgkit.cgtypes.vec3(0.71988926757566241, -0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(0.61688360278401322, 0.0, 0.71458836695634276), cgkit.cgtypes.vec3(0.33333333333333326, 0.0, 0.87267799624996478), cgkit.cgtypes.vec3(0.16666666666666663, -0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(0.26967233145831576, -0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.53934466291663152, -0.53934466291663152, 0.53934466291663152)], [cgkit.cgtypes.vec3(0.16666666666666663, 0.27824936883136031, 0.88655593424232904), cgkit.cgtypes.vec3(0.26967233145831576, 0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.53934466291663152, 0.53934466291663152, 0.53934466291663152), cgkit.cgtypes.vec3(0.71988926757566241, 0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(0.61688360278401322, 0.0, 0.71458836695634276), cgkit.cgtypes.vec3(0.33333333333333326, 0.0, 0.87267799624996478)], [cgkit.cgtypes.vec3(0.88655593424232904, -0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(0.87267799624996478, -0.33333333333333326, 0.0), cgkit.cgtypes.vec3(0.88655593424232904, -0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(0.88655593424232904, 0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(0.87267799624996478, 0.33333333333333326, 0.0), cgkit.cgtypes.vec3(0.88655593424232904, 0.16666666666666663, 0.27824936883136031)], [cgkit.cgtypes.vec3(0.0, 0.71458836695634276, -0.61688360278401322), cgkit.cgtypes.vec3(0.26967233145831576, 0.54792170028967613, -0.71988926757566241), cgkit.cgtypes.vec3(0.53934466291663152, 0.53934466291663152, -0.53934466291663152), cgkit.cgtypes.vec3(0.54792170028967613, 0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(0.27824936883136031, 0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(0.0, 0.87267799624996478, -0.33333333333333326)], [cgkit.cgtypes.vec3(0.27824936883136031, 0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(0.0, 0.87267799624996478, -0.33333333333333326), cgkit.cgtypes.vec3(-0.27824936883136031, 0.88655593424232904, -0.16666666666666663), cgkit.cgtypes.vec3(-0.27824936883136031, 0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(0.0, 0.87267799624996478, 0.33333333333333326), cgkit.cgtypes.vec3(0.27824936883136031, 0.88655593424232904, 0.16666666666666663)], [cgkit.cgtypes.vec3(0.27824936883136031, 0.88655593424232904, 0.16666666666666663), cgkit.cgtypes.vec3(0.54792170028967613, 0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(0.53934466291663152, 0.53934466291663152, 0.53934466291663152), cgkit.cgtypes.vec3(0.26967233145831576, 0.54792170028967613, 0.71988926757566241), cgkit.cgtypes.vec3(0.0, 0.71458836695634276, 0.61688360278401322), cgkit.cgtypes.vec3(0.0, 0.87267799624996478, 0.33333333333333326)], [cgkit.cgtypes.vec3(0.54792170028967613, 0.71988926757566241, -0.26967233145831576), cgkit.cgtypes.vec3(0.71458836695634276, 0.61688360278401322, 0.0), cgkit.cgtypes.vec3(0.87267799624996478, 0.33333333333333326, 0.0), cgkit.cgtypes.vec3(0.88655593424232904, 0.16666666666666663, -0.27824936883136031), cgkit.cgtypes.vec3(0.71988926757566241, 0.26967233145831576, -0.54792170028967613), cgkit.cgtypes.vec3(0.53934466291663152, 0.53934466291663152, -0.53934466291663152)], [cgkit.cgtypes.vec3(0.88655593424232904, 0.16666666666666663, 0.27824936883136031), cgkit.cgtypes.vec3(0.71988926757566241, 0.26967233145831576, 0.54792170028967613), cgkit.cgtypes.vec3(0.53934466291663152, 0.53934466291663152, 0.53934466291663152), cgkit.cgtypes.vec3(0.54792170028967613, 0.71988926757566241, 0.26967233145831576), cgkit.cgtypes.vec3(0.71458836695634276, 0.61688360278401322, 0.0), cgkit.cgtypes.vec3(0.87267799624996478, 0.33333333333333326, 0.0)]]
receptors_by_phi = scipy.io.loadmat(open(os.path.join(datadir,"receptors_by_phi_synthetic.mat"),mode="rb"))["receptors_by_phi"]



# The contents of this file get pasted into others
# Copyright (C) 2005-2007 California Institute of Technology, All rights reserved
# Author: Andrew D. Straw
from util import get_mean_interommatidial_distance

if __name__ == '__main__':
    
    if 0:
        v2 = [ (v.x, v.y, v.z) for v in receptor_dirs ]
        if 0:
            print repr(v2)
        elif 0:
            import pylab
            xs, ys, zs = zip(*v2)
            pylab.plot( xs, zs )
            pylab.show()
        elif 0:
            # This was piped to qhull "qhull i < receptors.qhull"
            print '3'
            print len(receptor_dirs)
            for v in receptor_dirs:
                print ' '.join(map(repr,v))

    if 1:
        import vtk
        from vtk.util.colors import red, purple, banana
        
        def init_vtk():

            renWin = vtk.vtkRenderWindow()

            renderers = []

            if 1:
                camera = vtk.vtkCamera()
                camera.SetParallelProjection(1)

                camera.SetClippingRange (1e-3, 1e6)

                ren1 = vtk.vtkRenderer()
                lk = vtk.vtkLightKit()
                ren1.SetViewport(0.0,0,1.0,1.0)
                ren1.SetBackground( .6,.6,.75)
                ren1.SetActiveCamera( camera )
                renWin.AddRenderer( ren1 )
                renderers.append( ren1 )
                
            renWin.SetSize( 1024, 768 )
            return renWin, renderers
    
        def interact_with_renWin(renWin, ren1=None, actor=None):

            iren = vtk.vtkRenderWindowInteractor()
            iren.SetRenderWindow( renWin )

            iren.SetInteractorStyle(vtk.vtkInteractorStyleTrackballCamera())
            iren.Initialize ()

            renWin.Render()

            iren.Start()
            
        renWin, renderers = init_vtk()

        camera = renderers[0].GetActiveCamera()

        camera.SetParallelProjection(1)
        camera.SetFocalPoint (0.0, 0.0, 0.0)
        camera.SetPosition (-7.0408423455838438, 4.8870908878427501, -1.2421278994521863)
        camera.SetViewAngle(30.0)
        camera.SetViewUp (0.57291464566682204, 0.73136940687668806, -0.36995621290269104)
        camera.SetClippingRange (3.6770148314673339, 14.954014556113785)
        camera.SetParallelScale(3.89701935633)

        renderers[0].SetActiveCamera(camera)

        def vtk_label_iod( receptor_dirs, triangles, renderers ):
            dists = get_mean_interommatidial_distance( receptor_dirs, triangles )
            pi = 3.1415926535897931
            R2D = 180.0/pi
            for v,dist in zip(receptor_dirs,dists):
                atext = vtk.vtkVectorText()
                atext.SetText("%.1f"%(dist*R2D,))
                textMapper = vtk.vtkPolyDataMapper()
                textMapper.SetInput(atext.GetOutput())
                textActor = vtk.vtkFollower()
                textActor.SetMapper(textMapper)
                scale = 0.03
                textActor.SetScale(scale, scale, scale)
                mult = 1.02
                textActor.AddPosition(v.x*mult,v.y*mult,v.z*mult)
                for renderer in renderers:
                    renderer.AddActor( textActor )
            
            
        def vtk_draw(receptor_dirs, triangles, hex_faces, renderers):
            tri_points = vtk.vtkPoints()
            tri_cells = vtk.vtkCellArray()

            body_line_points = vtk.vtkPoints()
            body_lines = vtk.vtkCellArray()
            body_point_num = 0
            
            for v in receptor_dirs:
                #if v.z > 0:
                if 1:
                    tri_points.InsertNextPoint(v.x, v.y, v.z)

            for tri in triangles:
                tri_cells.InsertNextCell(3)
                tri_cells.InsertCellPoint(tri[0])
                tri_cells.InsertCellPoint(tri[1])
                tri_cells.InsertCellPoint(tri[2])

            for face in hex_faces:
                body_lines.InsertNextCell( len(face)+1 )
                for v in face:
                    body_line_points.InsertNextPoint(v.x, v.y, v.z)
                    body_lines.InsertCellPoint( body_point_num )
                    body_point_num += 1
                v = face[0] # connect to beginning
                body_line_points.InsertNextPoint(v.x, v.y, v.z)
                body_lines.InsertCellPoint( body_point_num )
                body_point_num += 1

            if 1:
                profileData = vtk.vtkPolyData()
                profileData.SetPoints(tri_points)
                profileData.SetPolys(tri_cells)

                profileMapper = vtk.vtkPolyDataMapper()
                profileMapper.SetInput(profileData)

                profile = vtk.vtkActor()
                profile.SetMapper(profileMapper)
                profile.GetProperty().SetDiffuseColor(purple)
                profile.GetProperty().SetSpecular(.3)
                profile.GetProperty().SetSpecularPower(30)

                for renderer in renderers:
                    renderer.AddActor( profile )
            else:
                points_poly_data = vtk.vtkPolyData()
                points_poly_data.SetPoints(tri_points)

                head = vtk.vtkSphereSource()
                head.SetRadius(.05)
                #head.SetThetaResolution(8)
                #head.SetPhiResolution(8)
                head.SetThetaResolution(15)
                head.SetPhiResolution(15)

                head_glyphs = vtk.vtkGlyph3D()
                head_glyphs.SetInput(points_poly_data)
                head_glyphs.SetSource(head.GetOutput())

                head_glyph_mapper = vtk.vtkPolyDataMapper()
                head_glyph_mapper.SetInput( head_glyphs.GetOutput())
                headGlyphActor = vtk.vtkActor()
                headGlyphActor.SetMapper(head_glyph_mapper)
                headGlyphActor.GetProperty().SetDiffuseColor(purple)
                headGlyphActor.GetProperty().SetSpecular(.3)
                headGlyphActor.GetProperty().SetSpecularPower(30)

                for renderer in renderers:
                    renderer.AddActor( headGlyphActor )

            if 1:
                profileData = vtk.vtkPolyData()

                profileData.SetPoints(body_line_points)
                profileData.SetLines(body_lines)

                # Add thickness to the resulting line.
                profileTubes = vtk.vtkTubeFilter()
                profileTubes.SetNumberOfSides(8)
                profileTubes.SetInput(profileData)
                profileTubes.SetRadius(.005)
                #profileTubes.SetRadius(.8)

                profileMapper = vtk.vtkPolyDataMapper()
                profileMapper.SetInput(profileTubes.GetOutput())

                profile = vtk.vtkActor()
                profile.SetMapper(profileMapper)
                #profile.GetProperty().SetDiffuseColor( 0xd6/255.0, 0xec/255.0, 0x1c/255.0)
                #profile.GetProperty().SetDiffuseColor(cerulean)
                profile.GetProperty().SetDiffuseColor(banana)
                profile.GetProperty().SetSpecular(.3)
                profile.GetProperty().SetSpecularPower(30)

                for renderer in renderers:
                    renderer.AddActor( profile )

        vtk_draw( receptor_dirs, triangles, hex_faces, renderers )
        vtk_label_iod( receptor_dirs, triangles, renderers )
        interact_with_renWin(renWin,renderers)
